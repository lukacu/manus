# This is an autogenerated file, do not modify!

import os, sys

import echolib

def enum(name, enums):
    reverse = dict((value, key) for key, value in enums.iteritems())
    enums['reverse_mapping'] = reverse
    return type(name, (), enums)


ManipulatorStateType = enum("ManipulatorStateType", { 'PASSIVE' : 2, 'UNKNOWN' : 0, 'CONNECTED' : 1, 'ACTIVE' : 3, 'CALIBRATION' : 4 })
	
echolib.registerType(ManipulatorStateType, lambda x: ManipulatorStateType.reverse_mapping[x.readInt()], lambda x, o: x.writeInt(getattr(ManipulatorStateType, o)))


JointType = enum("JointType", { 'ROTATION' : 0, 'FIXED' : 3, 'TRANSLATION' : 1, 'GRIPPER' : 2 })
	
echolib.registerType(JointType, lambda x: JointType.reverse_mapping[x.readInt()], lambda x, o: x.writeInt(getattr(JointType, o)))


JointStateType = enum("JointStateType", { 'IDLE' : 0, 'MOVING' : 1, 'ERROR' : 2 })
	
echolib.registerType(JointStateType, lambda x: JointStateType.reverse_mapping[x.readInt()], lambda x, o: x.writeInt(getattr(JointStateType, o)))




class Point(object): 
	def __init__(self):
		self.x = None
		self.y = None
		self.z = None
		

	@staticmethod
	def read(reader):
		dst = Point()
		
		dst.x = echolib.readType(float, reader)
		
		
		dst.y = echolib.readType(float, reader)
		
		
		dst.z = echolib.readType(float, reader)
		
		
		return dst

	@staticmethod
	def write(writer, obj):
		
		echolib.writeType(float, writer, obj.x)
		
		
		echolib.writeType(float, writer, obj.y)
		
		
		echolib.writeType(float, writer, obj.z)
		
		

echolib.registerType(Point, Point.read, Point.write)


class Rotation(object): 
	def __init__(self):
		self.x = None
		self.y = None
		self.z = None
		

	@staticmethod
	def read(reader):
		dst = Rotation()
		
		dst.x = echolib.readType(float, reader)
		
		
		dst.y = echolib.readType(float, reader)
		
		
		dst.z = echolib.readType(float, reader)
		
		
		return dst

	@staticmethod
	def write(writer, obj):
		
		echolib.writeType(float, writer, obj.x)
		
		
		echolib.writeType(float, writer, obj.y)
		
		
		echolib.writeType(float, writer, obj.z)
		
		

echolib.registerType(Rotation, Rotation.read, Rotation.write)


class JointDescription(object): 
	def __init__(self):
		self.type = None
		self.dh_theta = None
		self.dh_alpha = None
		self.dh_d = None
		self.dh_a = None
		self.dh_min = None
		self.dh_max = None
		

	@staticmethod
	def read(reader):
		dst = JointDescription()
		
		dst.type = echolib.readType(JointType, reader)
		
		
		dst.dh_theta = echolib.readType(float, reader)
		
		
		dst.dh_alpha = echolib.readType(float, reader)
		
		
		dst.dh_d = echolib.readType(float, reader)
		
		
		dst.dh_a = echolib.readType(float, reader)
		
		
		dst.dh_min = echolib.readType(float, reader)
		
		
		dst.dh_max = echolib.readType(float, reader)
		
		
		return dst

	@staticmethod
	def write(writer, obj):
		
		echolib.writeType(JointType, writer, obj.type)
		
		
		echolib.writeType(float, writer, obj.dh_theta)
		
		
		echolib.writeType(float, writer, obj.dh_alpha)
		
		
		echolib.writeType(float, writer, obj.dh_d)
		
		
		echolib.writeType(float, writer, obj.dh_a)
		
		
		echolib.writeType(float, writer, obj.dh_min)
		
		
		echolib.writeType(float, writer, obj.dh_max)
		
		

echolib.registerType(JointDescription, JointDescription.read, JointDescription.write)


class JointState(object): 
	def __init__(self):
		self.type = None
		self.position = None
		self.goal = None
		self.speed = None
		

	@staticmethod
	def read(reader):
		dst = JointState()
		
		dst.type = echolib.readType(JointStateType, reader)
		
		
		dst.position = echolib.readType(float, reader)
		
		
		dst.goal = echolib.readType(float, reader)
		
		
		dst.speed = echolib.readType(float, reader)
		
		
		return dst

	@staticmethod
	def write(writer, obj):
		
		echolib.writeType(JointStateType, writer, obj.type)
		
		
		echolib.writeType(float, writer, obj.position)
		
		
		echolib.writeType(float, writer, obj.goal)
		
		
		echolib.writeType(float, writer, obj.speed)
		
		

echolib.registerType(JointState, JointState.read, JointState.write)


class JointCommand(object): 
	def __init__(self):
		self.speed = None
		self.goal = None
		

	@staticmethod
	def read(reader):
		dst = JointCommand()
		
		dst.speed = echolib.readType(float, reader)
		
		
		dst.goal = echolib.readType(float, reader)
		
		
		return dst

	@staticmethod
	def write(writer, obj):
		
		echolib.writeType(float, writer, obj.speed)
		
		
		echolib.writeType(float, writer, obj.goal)
		
		

echolib.registerType(JointCommand, JointCommand.read, JointCommand.write)


class PlanSegment(object): 
	def __init__(self):
		self.joints = []
		

	@staticmethod
	def read(reader):
		dst = PlanSegment()
		dst.joints = echolib.readList(JointCommand, reader)
		
		
		return dst

	@staticmethod
	def write(writer, obj):
		echolib.writeList(JointCommand, writer, obj.joints)
		
		

echolib.registerType(PlanSegment, PlanSegment.read, PlanSegment.write)


class TrajectorySegment(object): 
	def __init__(self):
		self.location = None
		self.rotation = None
		self.required = None
		self.gripper = None
		self.speed = None
		

	@staticmethod
	def read(reader):
		dst = TrajectorySegment()
		
		dst.location = echolib.readType(Point, reader)
		
		
		dst.rotation = echolib.readType(Rotation, reader)
		
		
		dst.required = echolib.readType(bool, reader)
		
		
		dst.gripper = echolib.readType(float, reader)
		
		
		dst.speed = echolib.readType(float, reader)
		
		
		return dst

	@staticmethod
	def write(writer, obj):
		
		echolib.writeType(Point, writer, obj.location)
		
		
		echolib.writeType(Rotation, writer, obj.rotation)
		
		
		echolib.writeType(bool, writer, obj.required)
		
		
		echolib.writeType(float, writer, obj.gripper)
		
		
		echolib.writeType(float, writer, obj.speed)
		
		

echolib.registerType(TrajectorySegment, TrajectorySegment.read, TrajectorySegment.write)


class ManipulatorDescription(object): 
	def __init__(self):
		self.name = None
		self.version = None
		self.joints = []
		

	@staticmethod
	def read(reader):
		dst = ManipulatorDescription()
		
		dst.name = echolib.readType(str, reader)
		
		
		dst.version = echolib.readType(float, reader)
		
		dst.joints = echolib.readList(JointDescription, reader)
		
		
		return dst

	@staticmethod
	def write(writer, obj):
		
		echolib.writeType(str, writer, obj.name)
		
		
		echolib.writeType(float, writer, obj.version)
		
		echolib.writeList(JointDescription, writer, obj.joints)
		
		

echolib.registerType(ManipulatorDescription, ManipulatorDescription.read, ManipulatorDescription.write)


class ManipulatorState(object): 
	def __init__(self):
		self.state = None
		self.joints = []
		

	@staticmethod
	def read(reader):
		dst = ManipulatorState()
		
		dst.state = echolib.readType(ManipulatorStateType, reader)
		
		dst.joints = echolib.readList(JointState, reader)
		
		
		return dst

	@staticmethod
	def write(writer, obj):
		
		echolib.writeType(ManipulatorStateType, writer, obj.state)
		
		echolib.writeList(JointState, writer, obj.joints)
		
		

echolib.registerType(ManipulatorState, ManipulatorState.read, ManipulatorState.write)


class Plan(object): 
	def __init__(self):
		self.segments = []
		

	@staticmethod
	def read(reader):
		dst = Plan()
		dst.segments = echolib.readList(PlanSegment, reader)
		
		
		return dst

	@staticmethod
	def write(writer, obj):
		echolib.writeList(PlanSegment, writer, obj.segments)
		
		

echolib.registerType(Plan, Plan.read, Plan.write)


class Trajectory(object): 
	def __init__(self):
		self.segments = []
		

	@staticmethod
	def read(reader):
		dst = Trajectory()
		dst.segments = echolib.readList(TrajectorySegment, reader)
		
		
		return dst

	@staticmethod
	def write(writer, obj):
		echolib.writeList(TrajectorySegment, writer, obj.segments)
		
		

echolib.registerType(Trajectory, Trajectory.read, Trajectory.write)





class ManipulatorDescriptionSubscriber(echolib.Subscriber):

	def __init__(self, client, alias, callback):
		def _read(message):
			reader = echolib.MessageReader(message)
			return ManipulatorDescription.read(reader)

		super(ManipulatorDescriptionSubscriber, self).__init__(client, alias, "dd1989630d5c260004842bd32b81e012", lambda x: callback(_read(x)))


class ManipulatorDescriptionPublisher(echolib.Publisher):

	def __init__(self, client, alias):
		super(ManipulatorDescriptionPublisher, self).__init__(client, alias, "dd1989630d5c260004842bd32b81e012")

	def send(self, obj):
		writer = echolib.MessageWriter()
		ManipulatorDescription.write(writer, obj)
		super(ManipulatorDescriptionPublisher, self).send(writer)



class ManipulatorStateSubscriber(echolib.Subscriber):

	def __init__(self, client, alias, callback):
		def _read(message):
			reader = echolib.MessageReader(message)
			return ManipulatorState.read(reader)

		super(ManipulatorStateSubscriber, self).__init__(client, alias, "cc43704573b22f6a05e12b5615aa8704", lambda x: callback(_read(x)))


class ManipulatorStatePublisher(echolib.Publisher):

	def __init__(self, client, alias):
		super(ManipulatorStatePublisher, self).__init__(client, alias, "cc43704573b22f6a05e12b5615aa8704")

	def send(self, obj):
		writer = echolib.MessageWriter()
		ManipulatorState.write(writer, obj)
		super(ManipulatorStatePublisher, self).send(writer)



class PlanSubscriber(echolib.Subscriber):

	def __init__(self, client, alias, callback):
		def _read(message):
			reader = echolib.MessageReader(message)
			return Plan.read(reader)

		super(PlanSubscriber, self).__init__(client, alias, "cf6fb0339b954d09c854f9a3cb2f1004", lambda x: callback(_read(x)))


class PlanPublisher(echolib.Publisher):

	def __init__(self, client, alias):
		super(PlanPublisher, self).__init__(client, alias, "cf6fb0339b954d09c854f9a3cb2f1004")

	def send(self, obj):
		writer = echolib.MessageWriter()
		Plan.write(writer, obj)
		super(PlanPublisher, self).send(writer)



class TrajectorySubscriber(echolib.Subscriber):

	def __init__(self, client, alias, callback):
		def _read(message):
			reader = echolib.MessageReader(message)
			return Trajectory.read(reader)

		super(TrajectorySubscriber, self).__init__(client, alias, "dc40378b85222525ac9a3aef0953dde3", lambda x: callback(_read(x)))


class TrajectoryPublisher(echolib.Publisher):

	def __init__(self, client, alias):
		super(TrajectoryPublisher, self).__init__(client, alias, "dc40378b85222525ac9a3aef0953dde3")

	def send(self, obj):
		writer = echolib.MessageWriter()
		Trajectory.write(writer, obj)
		super(TrajectoryPublisher, self).send(writer)






